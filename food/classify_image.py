# AUTOGENERATED! DO NOT EDIT! File to edit: classfy_image.ipynb (unless otherwise specified).

__all__ = ['search_by_clip', 'get_metadata', 'search_image', 'get_calories']

# Cell
from .tools import *
from .paths import *

import pandas as pd
import numpy as np
from .psql import *

# !nbdev_build_lib
import requests
from .clipmodel import image2clip
from PIL import Image

# Cell
from .milvus import collection
collection.load()

# Cell
def search_by_clip(clip, topk=10, query_expr='',search_params = {'ef':10000}): #32768
    search_params = {"metric_type": "IP",
                     "params": search_params}

    print(query_expr)
    results = collection.search(clip[None,], "clip", search_params, limit=topk, expr=query_expr, output_fields=["id"])
    results = results[0]
    return list(results.distances), results.ids

def get_metadata(ids):
    q = f"""select * from foods_big where id in {tuple(ids)}"""
    return pd.read_sql(q,engine)

# Cell
def search_image(url=None,path=None):
    if url:
        response = requests.get(url, stream=True)
        image = Image.open(response.raw)
    elif path:
        image = Image.open(path)
    clip = image2clip(image)
    results = search_by_clip(clip.numpy())
    df = get_metadata(results[1])
    df['score'] = results[0]
    return df

# Cell
def get_calories(url=None,path=None):
    r = search_image(url=url)
    r = r[(r['energy_kcal_100g']>r['energy_kcal_100g'].quantile(0.3))&(r['energy_kcal_100g']<r['energy_kcal_100g'].quantile(0.9))]
    rr = r[['energy_kcal_100g','proteins_100g','fat_100g','carbohydrates_100g']].mean().round(2)
    rr['ids'] =  r['id'].tolist()
    rr['scores'] =  r['score'].tolist()
    rr['names']  =  r['product_name'].tolist()
    return rr