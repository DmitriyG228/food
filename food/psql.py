# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_nbs/00_psql.ipynb.

# %% auto 0
__all__ = ['passw', 'docker_name', 'port', 'engine', 'Session', 'session', 'Base', 'schema', 'LocalBase', 'docker_run', 'pgdump',
           'pgrestore', 'Foods', 'Users', 'Dishes', 'User_properties', 'FoodsP']

# %% ../00_nbs/00_psql.ipynb 2
from sqlalchemy import create_engine
from sqlalchemy import DateTime
from sqlalchemy import Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, Date, String, Text, Float, Boolean, ForeignKey, and_, or_, MetaData
from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound
from sqlalchemy.orm import sessionmaker, relationship, backref
from sqlalchemy import update
from sqlalchemy import desc
import pandas as pd
import datetime
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import scoped_session
from sqlalchemy.orm import sessionmaker
import sqlalchemy
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql.expression import select, exists
from IPython.display import clear_output
from sqlalchemy import Column, Integer, String ,DateTime,UniqueConstraint,Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, backref
from sqlalchemy.dialects.postgresql import ARRAY
from sqlalchemy.sql.sqltypes import *
from sqlalchemy import *
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql.expression import Executable, ClauseElement #_literal_as_text
from sqlalchemy.ext import compiler
from sqlalchemy.schema import DDLElement
from sqlalchemy.inspection import inspect
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy import VARCHAR

from sqlalchemy.dialects.postgresql import JSON

from sqlalchemy.dialects.postgresql import REAL

from sqlalchemy import cast

from .paths import branch
print(branch)

from mytools.tools import *
from mytools.psql import *
from .paths import *

# %% ../00_nbs/00_psql.ipynb 3
passw = 'postgres'
docker_name = 'psql_food_prod'

port = 5435 if branch == 'prod' else 5436



engine = create_engine(f'postgresql+psycopg2://postgres:{passw}@localhost/postgres?port={port}',pool_size=64) #dev engine
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()
port

# %% ../00_nbs/00_psql.ipynb 4
schema = 'food'
LocalBase = declarative_base(metadata=MetaData(schema=schema))

# %% ../00_nbs/00_psql.ipynb 5
def docker_run(docker_name,passw,port): 
    return f'sudo docker run --name {docker_name} -e POSTGRES_PASSWORD={passw} -d -p {port}:5432  -v {docker_v_path} --restart unless-stopped postgres'


def pgdump(schema,passw,port):    
    now = pd.Timestamp.now()
    return f"pg_dump postgresql://postgres:{passw}@localhost:{port} -n {schema} > {schema}_{now.hour}_{now.day}_{now.month}_{now.year}.sql"

def pgrestore(docker_name, dump_path = False):
    if not dump_path:
        dumps = path_info(psql_backup_path).sort_values('time')
        dump_path = dumps[dumps['name'].str.contains(".sql")].iloc[-1]['path']
    
    return f'cat {dump_path} | docker exec -i {docker_name} psql -U postgres | >> log.log'

# %% ../00_nbs/00_psql.ipynb 10
class Foods (LocalBase):
    __tablename__ = 'foods' 
    id                  = Column(BIGINT, primary_key=True)
    description         = Column(String,          nullable=False)
    category            = Column(String,          nullable=False)
    energy              = Column(Float,          nullable=False)
    protein             = Column(Float,          nullable=False)
    carb                = Column(Float,          nullable=False)
    fat                 = Column(Float,          nullable=False)
    
    clip                = Column(ARRAY(REAL),          nullable=True)

# %% ../00_nbs/00_psql.ipynb 12
class Users (LocalBase):
    __tablename__ = 'users' 
    id                  = Column(BIGINT,     primary_key=True)
    first_name          = Column(String,     nullable=True)
    last_name           = Column(String,     nullable=True)
    username            = Column(String,     nullable=True)
    language_code       = Column(String,     nullable=True)
    

# %% ../00_nbs/00_psql.ipynb 14
class Dishes (LocalBase):
    __tablename__ = 'dishes'
    id                   = Column(BIGINT,  primary_key=True, autoincrement = True)
    food_id                   = Column(BIGINT,    nullable=False)
    
    # description          = Column(String,   nullable=False)
    # energy               = Column(Float,    nullable=False)
    # protein              = Column(Float,    nullable=False)
    # carb                 = Column(Float,    nullable=False)
    # fat                  = Column(Float,    nullable=False)
    score                = Column(Float,    nullable=False)

    photo_id            = Column(String,   nullable=False)
    user_id             = Column(BIGINT,   nullable=False)
    photo_message_id    = Column(BIGINT,   nullable=False)
    message_id          = Column(BIGINT,   nullable=False)

    timestamp           = Column(DateTime(timezone=True), nullable=False)
    ml_version          = Column(Float,    nullable=False)

    area                = Column(Integer,  nullable=False)
    
    added               = Column(Boolean, nullable   =True)

# %% ../00_nbs/00_psql.ipynb 15
class User_properties (LocalBase):
    __tablename__ = 'user_properties'
    id                  = Column(BIGINT,  primary_key=True, autoincrement = True)
    user_id             = Column(BIGINT,   nullable=False)
    property            = Column(String,   nullable=False)
    value               = Column(String,   nullable=False)
    timestamp           = Column(DateTime(timezone=True), nullable=False)

# %% ../00_nbs/00_psql.ipynb 17
class FoodsP (LocalBase):
    __tablename__ = 'foods_prompted' #inferenced text of altered food classes
    id                  = Column(BIGINT, primary_key=True)
    food_id             = Column(BIGINT, nullable=False)
    text                = Column(String, nullable=False)
    version             = Column(INT,    nullable=False)
    clip                = Column(ARRAY(REAL),     nullable=True)
